#pragma once

#include <QImage>

/**
 * Настройки отображения игры.
 */
class Settings final {
  
    QImage* _background; /**< Фоновое изображение. */
    QImage* _fruit; /**< Изображение фрукта. */
    qint32 _difficulty = 100; /**< Сложность игры в (мс) -  значение интервала между обновлениями таймера. */

public:

    static const qint32 MIN_DIFFICULTY = 140; /**< Минимально возможное значение интервала между обновлениями таймера. */
    static const qint32 MAX_DIFFICULTY = 65; /**< Максимально возможное значение интервала между обновлениями таймера. */
 

    /**
     * Конструктор по умолчанию.
     */
    Settings();
    
    /**
     * Запрещённый конструктор копирования.
     */
    Settings(const Settings&) = delete;

    /**
     * Запрещённый оператор присваивания копированием.
     */
    Settings& operator=(const Settings&) = delete;

    /**
     * Возвращает изображение фонового изображения в виде указателя.
     *
     * @return Указатель на объект фонового изображения.
     */
    QImage* background() const;

    /**
    * Возвращает изображение фрукта в виде указателя.
    *
    * @return Указатель на объект изображения фрукта.
    */
    QImage* fruit() const;

    /**
    * Устанавливает фоновое изображение.
    *
    * @param image Oбъeкт фонового изображения.
    */
    void setBackground(QImage* image);

    /**
     * Устанавливает изображение фрукта.
     *
     * @param image Oбъeкт изображения фрукта.
     */
    void setFruit(QImage* image);

    /**
    * Возвращает текущее значение сложности игры.
    *
    * @return Значение интервала между обновлениями таймера.
    */
    qint32 difficulty() const;

    /**
    * Устанавливает значение сложности игры.
    *
    * @param value Значение интервала между обновлениями таймера.
    */
    void setDifficulty(qint32 value);


};